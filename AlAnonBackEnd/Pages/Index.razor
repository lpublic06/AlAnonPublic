@page "/"

@inject IInicioRepository _inicioRepository
@inject IJSRuntime _jsRuntime
@inject IInvitacionRepository _invitacionRepository

<PageTitle>Inicio</PageTitle>
@if (isLoading)
{
    //Loading Symbol
    <div class="text-center pt-4">
        <img src="/images/loading.gif">
    </div>
}
else
{
    @((MarkupString)Inicio.Titulo)
    @((MarkupString)Inicio.ParrafoPrincipal)
    <a class="nav-link btn btn-link" href="/publico/grupos">Directorio de Juntas en El Paso y Sur de Nuevo Mexico</a>

    @if (ListaDeInvitaciones.Count() > 0)
    {
        <div class="col" style="display: flex; justify-content: center;">
            En esta semana:
        </div>
        <div id="carousel-container" style="width: 300px; height: 500px; max-width: 50%; margin: 0 auto; display: flex; justify-content: center;">
            <MudCarousel Class="mud-width-full" ShowArrows="@arrows" ShowBullets="@bullets" EnableSwipeGesture="@enableSwipeGesture" AutoCycle="true" AutoCycleTime="@CycleTime" TData="object">
                @foreach (var invitacion in ListaDeInvitaciones)
                {
                    <MudCarouselItem Transition="transition" Style="max-width: 100%; max-height: 100%;">
                        <div id="item-container">
                            <a data-src="@invitacion.ImagePath" data-fancybox>
                                <img src="@invitacion.ImagePath" alt="@invitacion.Alt" class="text-center" style="display: block; margin: 0 auto; max-width: 100%; max-height: 100%; object-fit: cover;">
                            </a>
                        </div>
                    </MudCarouselItem>
                }
            </MudCarousel>
            </div>
    }
}

@code {
    private InicioDto Inicio = new();
    private List<InvitacionDto> ListaDeInvitaciones { get; set; } = new List<InvitacionDto>();
    DateTimeOffset localTime;
    private bool arrows = false;
    private bool bullets = false;
    private bool enableSwipeGesture = true;
    private bool autocycle = true;
    private Transition transition = Transition.Slide;
    private TimeSpan CycleTime = new TimeSpan(00, 00, 03);
    private bool isLoading { get; set; } = true;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        //Only load the categories the first time the page is rendered
        if (firstRender)
        {
            // Get the timezone offset in minutes using JavaScript
            int timezoneOffsetInMinutes = await _jsRuntime.InvokeAsync<int>("blazorGetTimezoneOffset");
            // Create a DateTimeOffset object based on the local timezone offset
            localTime = DateTimeOffset.UtcNow.ToOffset(TimeSpan.FromMinutes(timezoneOffsetInMinutes));
            await ObtenerInicio();
            await ObtenerInvitacionesDelaSemana();
        }
    }

    private async Task ObtenerInicio()
    {
        isLoading = true;
        StateHasChanged();
        var result = await _inicioRepository.ObtenerInicio();
        if (result != null && result.Exito)
        {
            Inicio = result.Data;
        }
        isLoading = false;
        StateHasChanged();
    }

    private async Task ObtenerInvitacionesDelaSemana()
    {

        isLoading = true;
        StateHasChanged();
        var result = await _invitacionRepository.ObtenerInvitacionesDelaSemana(localTime.LocalDateTime);
        if (result != null && result.Exito)
        {
            ListaDeInvitaciones = result.Data;
        }
        isLoading = false;
        StateHasChanged();
    }
}
